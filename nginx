              搭建Nginx服务器
安装nginx软件包
yum  gcc pcre-devel  openssl-devel
useradd -s /sbin/nologin nginx       
tar -xf nginx-12
cd nginx-1.12
./configure --prefix=/usr/local/nginx --user=nginx --group=nginx --with-http_ssl_module     //指定路径，开启ssl加密功能
make && make install  //编译并安装

ln -s /usr/local/nginx/sbin/nginx    /sbin/  //方便后期使用
netstat -anptu |grep nginx   /查看网络信息
a是端口  n是端口号 t是tcp端口 u是udp端口 l是正在监听端口 p是监听端口服务名

首页在/usr/local/nginx/html 下的index.html文件

用户认证
在配置文件/usr/local/nginx/conf/nginx.conf添加两行
server_name localhost;
auth_basic "Input Password"    //认证提示符
auth_basic_user_file "/usr/local/nginx/pass";    //认证密码文件
location。。。

生成密码
yum -y install httpd-tools
htpasswd -c /usr/local/nginx/pass tom    //创建密码文件
追加用户时不用加-c

基于域名的虚拟主机
server{
   listen 80;           //端口
    server_name www.a.com    //域名
    location/{
              root html;       //指定网站根路径
              index index.html index.htm;
           }
 }
....
server{
   listen 80;           //端口
    server_name www.b.com   //域名
    location/{
              root www;    //指定网站根路径
              index index.html index.htm;
           }
 }
.... 
 
                                基于IP
server{
   listen 192.168.0.1：80；   //端口
    server_name web1.example.com;  //域名
    location/{
              root html;       //指定网站根路径
              index index.html index.htm;
           }
 }
....

4 案例4：SSL虚拟主机
cd /usr/local/nginx/conf
openssl genrsa > cert.key   //生成私钥
openssl req -new -x509 -key cert.key > cert.pem  //生成证书

修改配置文件
server {
        listen       443 ssl;
        server_name            www.c.com;
        ssl_certificate      cert.pem;         #这里是证书文件
        ssl_certificate_key  cert.key;         #这里是私钥文件
。。。


1 案例1：部署LNMP环境
安装部署Nginx、MariaDB、PHP环境
安装Nginx、MariaDB、PHP、PHP-FPM；
启动Nginx、MariaDB、FPM服务；

安装 nginx
mariadb、mariadb-server、mariadb-devel
php、php-fpm、php-mysql
依赖包gcc openssl-devel pcre-devel zlib-devel
安装nginx，已有
安装MariaDB
yum -y install mariadb mariadb-server mariadb-devel
安装php和php-fpm（在lnmp——soft）
yum php php-mysql 
yum php-fpm-5.4
启动nginx，mysql，php-fpm

构建LNMP平台
修改配置文件并启动法无
...打开动态页面的注释
  location  ~  \.php$  {
            root           html;
            fastcgi_pass   127.0.0.1:9000;    #将请求转发给本机9000端口，PHP解释器
            fastcgi_index  index.php;
            #fastcgi_param   SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include        fastcgi.conf;
        }
创建动态php页面
vim /usr/local/nginx/html/test1.php
参看lnmp_soft/php_scripts/mysql.php


LNMP常见问题
Nginx的默认访问日志文件为/usr/local/nginx/logs/access.log
Nginx的默认错误日志文件为/usr/local/nginx/logs/error.log
PHP默认错误日志文件为/var/log/php-fpm/www-error.log
如果动态网站访问失败，可用参考错误日志，查找错误信息。


案例3：地址重写
所有访问a.html的请求，重定向到b.html
rewrite /旧地址  /新地址 
修改配置文件
server {
        
    root   html;
index  index.html index.htm;
rewrite /a.html  /b.html;            
访问a会显示b的内容

访问a.html重定向到b.html（跳转地址栏）
location / {
    root   html;
index  index.html index.htm;
rewrite /a.html  /b.html  redirect; 
访问a跳转为b，地址栏变化


修改配置文件(访问192.168.4.5的请求重定向至www.tmooc.cn)
server {
        listen       80;
        server_name  localhost;
rewrite ^/ http://www.tmooc.cn/;

修改配置文件(访问192.168.4.5/下面子页面，重定向至www.tmooc.cn/下相同的页面)
server {
        listen       80;
        server_name  localhost;
rewrite ^/(.*)$ http://www.tmooc.cn/$1;
        把子页面保存为$1 加在新地址后面




实现curl和火狐访问相同链接返回的页面不同)
if ($http_user_agent ~* firefox) {    //识别客户端firefox浏览器
rewrite ^(.*)$ /firefox/$1;
}

rewrite 旧地址 新地址 [选项];
last 不再读其他rewrite
break 不再读其他语句，结束请求
redirect 临时重定向
permament 永久重定向
rewrite 旧地址 新地址 [选项];
last 不再读其他rewrite
break 不再读其他语句，结束请求
redirect 临时重定向
permament 永久重定向


案例1：Nginx反向代理
修改配置文件
http {
#使用upstream定义后端服务器集群，集群名称任意(如webserver)
#使用server定义集群中的具体服务器和端口
upstream webserver {
                server 192.168.2.100:80;
                server 192.168.2.200:80;
        }
.. ..
server {
        listen        80;
        server_name  localhost;
            location / {
#通过proxy_pass将用户的请求转发给webserver集群
            proxy_pass http://webserver;
        }
}
访问多次查看效果
upstream服务器集群池属性
#weight设置服务器权重值，默认值为1
#max_fails设置最大失败次数
#fail_timeout设置失败超时时间，单位为秒
#down标记服务器已关机，不参与集群调度
####################################################################################

Nginx的TCP/UDP调度器
Nginx编译安装时需要使用--with-stream，开启ngx_stream_core_module模块

修改配置、

stream {
  upstream backend {
       server 192.168.2.100:22;            //后端SSH服务器的IP和端口
        server 192.168.2.200:22;
}
       server {
            listen 12345;                    //Nginx监听的端口
             proxy_connect_timeout 1s;
              proxy_timeout 3s;
             proxy_pass backend;\
}
http{..
测试
ssh 192.168.4.5 -p 12345    使用多次

####################################################################################
构建Nginx服务器
装包编译

优化并发量
vim /usr/local/nginx/conf/nginx.conf
.. ..
worker_processes  2;                    //与CPU核心数量一致
events {
worker_connections 65535;        //每个worker最大并发连接数
use epoll;

优化Linux内核参数（最大文件数量）
vim /etc/security/limits.conf
    .. ..
*               soft    nofile            100000
*               hard    nofile            100000
用户组          硬或软限制    需要限制项目         限制值
、
###############################################################
优化Nginx数据包头缓存
http {
client_header_buffer_size    1k;     //默认请求包头信息的缓存    
large_client_header_buffers  4 4k;    //大请求包头部信息的缓存个数与容量
.. ..


修改Nginx配置文件，定义对静态页面的缓存时间
location ~* \.(jpg|jpeg|gif|png|css|js|ico|xml)$ {
expires        30d;            //定义客户端缓存时间为30天

########################################################################3
自定义报错页面，提示404文件未找到
修改配置文件
error_page   404  /40x.html;    //自定义错误页面
vim /usr/local/nginx/html/40x.html

200     一切正常
301    永久重定向
302	临时重定向
401 	用户名密码错误
403	禁止访问
404	文件不存在
414	请求URI头部过长
500	服务器内部错误
################################################################################

服务器内存缓存

http { 
open_file_cache          max=2000  inactive=20s;
        open_file_cache_valid    60s;
        open_file_cache_min_uses 5;
        open_file_cache_errors   off;
//设置服务器最大缓存2000个文件句柄，关闭20秒内无请求的文件句柄
//文件句柄的有效时间是60秒，60秒后过期
//只有访问次数超过5次会被缓存













































































































